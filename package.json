{
	"name": "file-header-generator",
	"license": "GPLV3",
	"displayName": "File Header Generator",
	"description": "Automatically creates (and maintains) file headers for multiple languages.",
	"version": "1.3.0",
	"publisher": "Lut99",
	"repository": {
		"type": "git",
		"url": "https://github.com/Lut99/FileHeaderGenerator.git"
	},
	"engines": {
		"vscode": "^1.41.0"
	},
	"categories": [
		"Other"
	],
	"activationEvents": [
		"onStartupFinished"
	],
	"main": "./out/extension.js",
	"contributes": {
		"commands": [
			{
				"command": "file-header-generator.generateHeader",
				"title": "Generate Header"
			}
		],
		"configuration": [
			{
				"title": "File Header Generator",
				"properties": {
					"file-header-generator.enabled": {
						"type": "boolean",
						"default": true,
						"description": "Enables or disables this extension."
					},
					"file-header-generator.username": {
						"type": "string",
						"default": "Anonymous",
						"description": "Set your own name to sign the headers generated with this extension."
					},
					"file-header-generator.searchLines": {
						"type": "number",
						"default": 15,
						"description": "Number of lines to search for the 'Auto updated?' and 'Last edited:' fields. The larger the number, the more you can write before the fields can appear; however, it also increases search cost for files that are not auto updated."
					},
					"file-header-generator.dateFormat": {
						"type": "string",
						"default": "<locale>",
						"description": "The format of dates written by the FileHeaderGenerator. For an overview of the tokens available, refer to the extension's README."
					},
					"file-header-generator.customLanguages": {
						"type": "object",
						"default": {},
						"description": "Defines support for custom languages. Map the language ID to a triplet of a start, middle and end comment, and optionally a docstring. See the README for more information."
					},
					"file-header-generator.docString": {
						"type": "boolean",
						"default": true,
						"description": "Whether or not to use special doc-comments for the description part. For example, Rust has `//!`, which makes the language server aware of the description for the module. Note that enabling this will automatically overwrite old style comments on save (and vice versa)."
					}
				}
			}
		]
	},
	"scripts": {
		"vscode:prepublish": "npm run compile",
		"compile": "tsc -p ./",
		"watch": "tsc -watch -p ./",
		"pretest": "npm run compile",
		"test": "node ./out/test/runTest.js"
	},
	"devDependencies": {
		"@types/glob": "^7.1.1",
		"@types/luxon": "^3.2.0",
		"@types/mocha": "^5.2.7",
		"@types/node": "^12.11.7",
		"@types/vscode": "^1.41.0",
		"glob": "^7.1.5",
		"mocha": "^10.0.0",
		"tslint": "^5.20.0",
		"typescript": "^3.6.4",
		"vscode-test": "^1.2.2"
	},
	"dependencies": {
		"luxon": "^3.2.1"
	}
}
